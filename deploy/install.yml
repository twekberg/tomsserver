#!/usr/bin/env ansible-playbook

- hosts: localhost
  become: yes

  vars:
    - ME: tekberg
    - HOME: "/home/{{ ME }}"
    # Set OLD_ANSIBLE_HOST to "NONE" to ignore.
    - OLD_ANSIBLE_HOST: "10.144.70.199"
    - PYTHON_VERSION: "3.11"

  vars_files:
    - secrets.yml

  tasks:
    - name: install private key
      copy:
        content: "{{ PRIVATE_SSH_KEY }}"
        dest: "{{ HOME }}/.ssh/id_rsa"
        mode: 0600

    - name: install public key
      copy:
        content: "{{ PUBLIC_SSH_KEY }}"
        dest: "{{ HOME }}/.ssh/id_rsa.pub"
        mode: 0600

    - name: "is python{{ PYTHON_VERSION }} already installed"
      stat:
        path: "/usr/bin/python{{ PYTHON_VERSION }}"
      register: check_new_python
      tags:
        - python

    - name: "install python {{ PYTHON_VERSION }} - step 1"
      apt:
        update_cache: yes
      when: not check_new_python.stat.exists
      tags:
        - python

    # Adds the add-apt-repository command used in step 3..
    - name: "Install python {{ PYTHON_VERSION }} - step 2"
      apt:
        name: software-properties-common
        state: present
      when: not check_new_python.stat.exists
      tags:
        - python

    - name: "Install python {{ PYTHON_VERSION }} - step 3"
      command: add-apt-repository ppa:deadsnakes/ppa
      when: not check_new_python.stat.exists
      tags:
        - python

    - name: "Install python {{ PYTHON_VERSION }} - step 4"
      apt:
        name: "python{{ PYTHON_VERSION }}"
        state: present
      when: not check_new_python.stat.exists
      tags:
        - python

    - name: install other packages
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - emacs-nox
        - emacs-el
        - diceware
        - docx2txt
        - dos2unix
        - mercurial
        - pandoc
        - pylint
        - python3-venv
        - python3-virtualenv
        - python3-pip
        - rst2pdf
        - incron
        - sqlite3


    - name: current saml2aws version or 0.0.0
      shell: "if [ -x /usr/local/bin/saml2aws ]; then  saml2aws --version 2>&1; else  echo '0.0.0'; fi"
      register: saml2aws_current_version
      tags:
        - saml2aws

    - name: get file that has latest saml2aws version
      get_url:
        url: https://github.com/Versent/saml2aws/releases
        dest: /tmp/releases
        mode: '0440'
      tags:
        - saml2aws

    - name: get latest saml2aws version
      shell: grep '[>]v' /tmp/releases | head -1 | cut -dv -f2 | cut '-d<' -f1
      register: saml2aws_latest_version
      tags:
        - saml2aws

    - name: compare current with latest version
      ansible.builtin.file:
        path: "/tmp/releases-checked"
        state: touch
      when: "saml2aws_latest_version.stdout is version(saml2aws_current_version.stdout, '>')"
      tags:
        - saml2aws


    - name: used to indicate new version
      stat:
        path: /tmp/releases-checked
      register: new_release
      tags:
        - saml2aws

    - name: get saml2aws tar
      get_url:
        url: "{{ 'https://github.com/Versent/saml2aws/releases/download/v' + saml2aws_latest_version.stdout + '/saml2aws_' + saml2aws_latest_version.stdout + '_linux_amd64.tar.gz' }}"
        dest: "/tmp/saml2aws.tar"
        mode: '0755'
      when: new_release.stat.exists
      tags:
        - saml2aws

    - name: create swml2aws tar directory
      file:
        path: /tmp/saml2aws_dir
        state: directory
      when: new_release.stat.exists
      tags:
        - saml2aws

    - name: untar saml2aws
      unarchive:
        src: "/tmp/saml2aws.tar"
        dest: "/tmp/saml2aws_dir"
      tags:
        - saml2aws
      when: new_release.stat.exists

    - name: install saml2aws
      copy:
        src: /tmp/saml2aws_dir/saml2aws
        dest: /usr/local/bin/saml2aws
        mode: 0755
        owner: root
        group: root
      when: new_release.stat.exists
      tags:
        - saml2aws

    - name: cleanup saml2aws directory
      file:
        state: absent
        path: /tmp/saml2aws_dir
      tags:
        - saml2aws

    - name: cleanup saml2aws files
      file:
        state: absent
        path: "{{ item }}"
      loop:
        - /tmp/releases
        - /tmp/saml2aws.tar
        - /tmp/releases-checked
      tags:
        - saml2aws


    - name: clone system repos
      git:
        clone: yes
        repo: "git@gitlab.labmed.uw.edu:systems/{{ item }}.git"
        dest: "{{ HOME }}/src/{{ item }}"
      loop:
        - ariel
        - headsup
        - replicated_dbs
      become: true
      become_user: "{{ ME }}"

    - name: clone uwlabmed repos
      git:
        clone: yes
        repo: "git@gitlab.labmed.uw.edu:uwlabmed/{{ item }}.git"
        dest: "{{ HOME }}/src/{{ item }}"
      loop:
        - ansible_roles
        - ansible_scripts
        - dokku-stack
        - genetics_db
        - hemepath_ad_hoc
        - labreport
        - lmbackup
        - moinmoin-config
        - oltg-flask
        - personnel
      become: true
      become_user: "{{ ME }}"

    - name: clone compstaff repos
      git:
        clone: yes
        repo: "git@gitlab.labmed.uw.edu:compstaff/{{ item }}.git"
        dest: "{{ HOME }}/src/{{ item }}"
      loop:
        - francisco_scripts
      become: true
      become_user: "{{ ME }}"


    - name: clone uwlabmed repos with different names
      git:
        clone: yes
        repo: "git@gitlab.labmed.uw.edu:uwlabmed/{{ item.0 }}.git"
        dest: "{{ HOME }}/src/{{ item.1 }}"
      loop:
        - ['Portia', 'portia']
        - ['tracker', 'tracker-old']
        - ['tracker-new', 'tracker']
        - ['userbase', 'elmira']
      become: true
      become_user: "{{ ME }}"

    - name: create .pylintrc
      copy:
        src: templates/pylintrc
        dest: "{{ HOME }}.pylintrc"
        mode: 0755
        owner: "{{ ME }}"
        group: "{{ ME }}"

    - name: update notes.txt to contain the clone commands
      lineinfile:
        dest="{{ HOME }}/src/notes.txt"
        state=present
        create=no
        owner="{{ ME }}"
        group="{{ ME }}"
        mode=0664
        backrefs=no
        regexp="{{ item.0 }}[.]git"
        line="git clone git@gitlab.labmed.uw.edu:{{ item.0 }}.git {{ item.1 }}"
      loop:
        - ['compstaff/francisco_scripts', 'francisco_scripts']
        - ['systems/ariel', 'ariel']
        - ['systems/headsup', 'headsup']
        - ['systems/replicated_dbs', 'replicated_dbs']
        - ['uwlabmed/ansible_roles', 'ansible_roles']
        - ['uwlabmed/ansible_scripts', 'ansible_scripts']
        - ['uwlabmed/dokku-stack', 'dokku-stack']
        - ['uwlabmed/genetics_db', 'genetics_db']
        - ['uwlabmed/hemepath_ad_hoc', 'hemepath_ad_hoc']
        - ['uwlabmed/labreport', 'labreport']
        - ['uwlabmed/lmbackup', 'lmbackup']
        - ['uwlabmed/moinmoin-config', 'moinmoin-config']
        - ['uwlabmed/oltg-flask', 'oltg-flask']
        - ['uwlabmed/personnel', 'personnel']
        - ['uwlabmed/Portia', 'portia']
        - ['uwlabmed/tracker', 'tracker-old']
        - ['uwlabmed/tracker-new', 'tracker']
        - ['uwlabmed/userbase', 'elmira']

    # Put in only repos that need it. They have it in the .gitignore file.
    - name: copy vault pass
      copy:
        content: "{{ VAULT_PASS }}"
        dest: "{{ HOME }}/src/{{ item }}/vault_pass.txt"
        owner: "{{ ME }}"
        group: "{{ ME }}"
        mode: 0664
      loop:
        - dokku-stack
        - headsup
        - lmbackup
        - moinmoin-config
        - oltg-flask
        - personnel
        - portia
        - replicated_dbs
        - tracker
        - tracker-old

    - name: Create venvs for select repos.
      script: scripts/create_venv.sh "{{ item }}"
      loop:
         - portia
         - personnel
         - moinmoin-config
         - replicated_dbs
         - dokku-stack
         - tracker
         - ariel
         - oltg-flask
         - elmira
         - headsup
      become: true
      become_user: "{{ ME }}"

    - name: define alias for tomsserver in .bashrc
      lineinfile:
        dest="{{ HOME }}/.bashrc"
        state=present
        create=no
        owner="{{ ME }}"
        group="{{ ME }}"
        mode=0664
        backrefs=no
        regexp="atomsserver"
        line="alias atomsserver='if [ \"$(type deactivate 2>/dev/null | grep '\\''deactivate is a function'\\''|wc -l)\" -eq 1 ]; then   deactivate; fi; cd /home/{{ ME }}/src/tomsserver'"
      tags:
        alias

    - name: portia user setup - .pgpass
      template:
        src: templates/pgpass
        dest: "{{ HOME }}/.pgpass"
        owner: "{{ ME }}"
        group: "{{ ME }}"
        mode: 0600

    # See comment below regarding this user.
    - name: create retrieve user
      user:
        name: retrieve
        generate_ssh_key: yes
        password: "{{ RETRIEVE_PASSWORD }}"
        shell: /bin/bash
      tags:
        - retrieve

    # Do all of the MAILTOs here
    - name: MAILTO crontab setup
      cronvar:
        user="{{ item }}"
        name="MAILTO"
        value="{{ ME }}@uw.edu"
      loop:
        - "{{ ME }}"
        - retrieve
      tags:
        - cron
        - retrieve

    - name: set up ssh
      copy:
        dest: "{{ HOME }}/.ssh/config"
        content: |
          Include includes/*

    - name: set up ssh for oltg-aws-test
      blockinfile:
        create: yes
        dest: "{{ HOME }}/.ssh/includes/oltg-test-aws-test.conf"
        marker: "# {mark} config for oltg-test-aws-test"
        content: |
          Host oltg-aws-test
            HostName 35.166.228.21
            User ubuntu
            IdentityFile ~/.ssh/oltg.pem
            StrictHostKeyChecking no
            ProxyCommand ssh ihop exec nc %h %p 2> /dev/null

    - name: set up ssh for oltg-aws-prod
      blockinfile:
        create: yes
        dest: "{{ HOME }}/.ssh/includes/oltg-test-aws-prod.conf"
        marker: "# {mark} config for oltg-prod-aws-prod"
        content: |
          Host oltg-aws-prod
            HostName 34.210.105.200
            User ubuntu
            IdentityFile ~/.ssh/oltg.pem
            StrictHostKeyChecking no
            ProxyCommand ssh ihop exec nc %h %p 2> /dev/null

    - name: oltg.pem to .ssh
      copy:
        content: "{{ PRIVATE_AWS_OLTG_KEY }}"
        dest: "{{ HOME }}/.ssh/oltg.pem"
        owner: "{{ ME }}"
        group: "{{ ME }}"
        mode: 0600

    - name: create aws parameters directory
      file:
        path: "{{ HOME}}/.aws"
        state: directory
        owner: "{{ ME }}"
        group: "{{ ME }}"
        mode: 0775
      tags:
        aws

    - name: check aws config file
      stat:
        path: "{{ HOME }}/.aws/config"
      register: aws_config
      tags:
        aws

    - name: check aws credentials file
      stat:
        path: "{{ HOME }}/.aws/credentials"
      register: aws_credentials
      tags:
        aws

    - name: check aws .saml2aws file
      stat:
        path: "{{ HOME }}/.saml2aws"
      register: aws_saml2aws
      tags:
        aws


    - name: set up aws config parameters
      template:
        src: templates/dot_aws_config
        dest: "{{ HOME }}/.aws/config"
        owner: "{{ ME }}"
        group: "{{ ME }}"
        mode: 0700
      when: not aws_config.stat.exists
      become: true
      become_user: "{{ ME }}"
      tags:
        aws

    - name: set up aws credentials parameters
      template:
        src: templates/dot_aws_credentials
        dest: "{{ HOME }}/.aws/credentials"
        owner: "{{ ME }}"
        group: "{{ ME }}"
        mode: 0700
      when: not aws_credentials.stat.exists
      become: true
      become_user: "{{ ME }}"
      tags:
        aws

    - name: set up aws .saml2aws parameters
      template:
        src: templates/dot_saml2aws
        dest: "{{ HOME }}/.saml2aws"
        owner: "{{ ME }}"
        group: "{{ ME }}"
        mode: 0700
      when: not aws_saml2aws.stat.exists
      become: true
      become_user: "{{ ME }}"
      tags:
        aws

    - name: cron to copy PLM JSON files
      cron:
        user: "{{ ME }}"
        name: "copy JSON files"
        job: "scp -q monitor.labmed.uw.edu:/home/filetransfer/plm-json/*.json src/headsup/json 2>&1"
        minute: "0-59/5"
      tags:
        - cron

    - name: create PLM json directory directory
      file:
        path: "{{ HOME }}/headsup/json"
        state: directory
      become: true
      become_user: "{{ ME }}"

    - name: create SANDBOX directory
      file:
        path: "{{ HOME }}/SANDBOX"
        state: directory
      become: true
      become_user: "{{ ME }}"

    - name: preserve SANDBOX files
      command: "rsync -a {{ ME }}@{{ OLD_ANSIBLE_HOST }}:SANDBOX/ {{ HOME }}/SANDBOX/"
      become: true
      become_user: "{{ ME }}"
      when:  OLD_ANSIBLE_HOST != "NONE"
# This didn't work
#    - name: preserve SANDBOX files
#      synchronize:
#        archive: yes
#        src: "{{ ME }}@{{ OLD_ANSIBLE_HOST }}:{{ HOME }}/SANDBOX/"
#        dest: "{{ HOME }}/SANDBOX/"
#      become: true
#      become_user: "{{ ME }}"
      when:  OLD_ANSIBLE_HOST != "NONE"


    - name: create labreport directory lis_archive
      file:
        path: "{{ HOME }}/lis_archive"
        state: directory
      become: true
      become_user: "{{ ME }}"

    - name: create labreport directory lis_data
      file:
        path: "{{ HOME }}/lis_data"
        state: directory
      become: true
      become_user: "{{ ME }}"

    - name: create labreport directory lis_pdf
      file:
        path: "{{ HOME }}/lis_pdf"
        state: directory
      become: true
      become_user: "{{ ME }}"

    # The retrieve user exists to copy files from elsewhere to here.
    # Specifically the aws sync command it used to copy Elmira user
    # data files here. The primary user of this data is portia
    # reports.
    - name: create .aws directory
      file:
        path: /home/retrieve/.aws
        state: directory
        owner: retrieve
        group: retrieve
        mode: 0755
      tags:
        - retrieve

    - name: create aws config file
      copy:
        src: templates/aws_config
        dest: /home/retrieve/.aws/config
        owner: retrieve
        group: retrieve
        mode: 0600
      tags:
        - retrieve

    - name: create aws credentials file
      template:
        src: templates/aws_credentials
        dest: /home/retrieve/.aws/credentials
        owner: retrieve
        group: retrieve
        mode: 0600
      tags:
        - retrieve

    - name: create /usr/local/share/elmira directory
      file:
        path: /usr/local/share/elmira
        state: directory
        owner: retrieve
        group: retrieve
        mode: 0755
      tags:
        - retrieve

    # Using sync instead of cp in case the files haven't changed,
    # which is frequently the case.
    - name: cron to copy Elmira JSON files
      cron:
        user: retrieve
        name: "copy Elmira JSON files"
        job: "/usr/local/bin/aws s3 sync s3://elmira-resources/userdata/ /usr/local/share/elmira/ --exclude '*' --include '*.json' --exclude medialab.json"
        minute: "4"
      tags:
        - retrieve
