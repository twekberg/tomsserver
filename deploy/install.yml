#!/usr/bin/env ansible-playbook

- hosts: localhost
  become: yes

  vars:
    - HOME: "/home/tekberg"

  vars_files:
    - secrets.yml

  tasks:
    - name: install private key
      copy:
        content: "{{ PRIVATE_SSH_KEY }}"
        dest: "{{ HOME }}/.ssh/id_rsa"
        mode: 0600

    - name: install public key
      copy:
        content: "{{ PUBLIC_SSH_KEY }}"
        dest: "{{ HOME }}/.ssh/id_rsa.pub"
        mode: 0600

    - name: is python3.9 already installed
      stat:
        path: /usr/bin/python3.9
      register: check_python39

    - name: install python 3.9 - step 1
      apt:
        update_cache: yes
      when: not check_python39.stat.exists

    - name: Install python 3.9 - step 2
      apt:
        name: software-properties-common
        state: present
      when: not check_python39.stat.exists

    - name: Install python 3.9 - step 3
      command: add-apt-repository ppa:deadsnakes/ppa
      when: not check_python39.stat.exists

    - name: Install python 3.9 - step 4
      apt:
        name: python3.9
        state: present
      when: not check_python39.stat.exists

    - name: install other packages
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - emacs-nox
        - diceware
        - docx2txt
        - python3-venv
        - python3-pip
        - rst2pdf


    - name: is saml2aws already installed
      stat:
        path: /usr/local/bin/saml2aws
      register: stat_saml2aws


    - name: get saml2aws version
      shell: "saml2aws --version | rev | cut -d ' ' -f1 | rev"
      register: saml2aws_version
      when: stat_saml2aws.stat.exists

    # 2.30.0 is the latest saml2aws when this was written.
    - name: check saml2aws version
      get_url:
        url: https://github.com/Versent/saml2aws/releases
        dest: /tmp/releases
        mode: '0440'
      when: not stat_saml2aws.stat.exists or (stat_saml2aws.stat.exists and saml2aws_version.stderr is version('2.30.0', '<'))

    - name: new saml2aws release
      stat:
        path: /tmp/releases
      register: new_release

    - name: get saml2aws path
      shell: grep linux_amd64 /tmp/releases | head -1 | cut -d= -f2 | cut '-d"' -f2
      register: saml2aws_partial_path
      when: new_release.stat.exists

    - name: get saml2aws tar
      get_url:
        url: "{{ 'https://github.com' + saml2aws_partial_path.stdout }}"
        dest: "/tmp/saml2aws.tar"
        mode: '0755'
      when: new_release.stat.exists

    - name: create swml2aws tar directory
      file:
        path: /tmp/saml2aws_dir
        state: directory
      when: new_release.stat.exists

    - name: untar saml2aws
      unarchive:
        src: "/tmp/saml2aws.tar"
        dest: "/tmp/saml2aws_dir"
      when: new_release.stat.exists

    - name: install saml2aws
      copy:
        src: /tmp/saml2aws_dir/saml2aws
        dest: /usr/local/bin/saml2aws
        mode: 0755
        owner: root
        group: root
      when: new_release.stat.exists

    - name: cleanup saml2aws directory
      file:
        state: absent
        path: /tmp/saml2aws_dir

    - name: cleanup saml2aws files
      file:
        state: absent
        path: "{{ item }}"
      loop:
        - /tmp/releases
        - /tmp/saml2aws.tar


    - name: clone system repos
      git:
        clone: yes
        repo: "git@gitlab.labmed.uw.edu:systems/{{ item }}.git"
        dest: "{{ HOME }}/src/{{ item }}"
      loop:
        - ariel
        - headsup
        - replicated_dbs
      become: true
      become_user: tekberg

    - name: clone uwlabmed repos
      git:
        clone: yes
        repo: "git@gitlab.labmed.uw.edu:uwlabmed/{{ item }}.git"
        dest: "{{ HOME }}/src/{{ item }}"
      loop:
        - ansible_roles
        - ansible_scripts
        - dokku-stack
        - genetics_db
        - hemepath_ad_hoc
        - labreport
        - lmbackup
        - moinmoin-config
        - oltg-flask
        - personnel
      become: true
      become_user: tekberg

    - name: clone uwlabmed repos with different names
      git:
        clone: yes
        repo: "git@gitlab.labmed.uw.edu:uwlabmed/{{ item.0 }}.git"
        dest: "{{ HOME }}/src/{{ item.1 }}"
      loop:
        - ['Portia', 'portia']
        - ['tracker', 'tracker-old']
        - ['tracker-new', 'tracker']
        - ['userbase', 'elmira']
      become: true
      become_user: tekberg

    - name: update notes.txt to contain the clone commands
      lineinfile:
        dest="{{ HOME }}/src/notes.txt"
        state=present
        create=no
        owner=tekberg
        group=tekberg
        mode=0664
        backrefs=no
        regexp="{{ item.0 }}[.]git"
        line="git clone git@gitlab.labmed.uw.edu:{{ item.0 }}.git {{ item.1 }}"
      loop:
        - ['systems/ariel', 'ariel']
        - ['systems/headsup', 'headsup']
        - ['systems/replicated_dbs', 'replicated_dbs']
        - ['uwlabmed/ansible_roles', 'ansible_roles']
        - ['uwlabmed/ansible_scripts', 'ansible_scripts']
        - ['uwlabmed/dokku-stack', 'dokku-stack']
        - ['uwlabmed/genetics_db', 'genetics_db']
        - ['uwlabmed/hemepath_ad_hoc', 'hemepath_ad_hoc']
        - ['uwlabmed/labreport', 'labreport']
        - ['uwlabmed/lmbackup', 'lmbackup']
        - ['uwlabmed/moinmoin-config', 'moinmoin-config']
        - ['uwlabmed/oltg-flask', 'oltg-flask']
        - ['uwlabmed/personnel', 'personnel']
        - ['uwlabmed/Portia', 'portia']
        - ['uwlabmed/tracker', 'tracker-old']
        - ['uwlabmed/tracker-new', 'tracker']
        - ['uwlabmed/userbase', 'elmira']

    # Put in only repos that need it. They have it in the .gitignore file.
    - name: copy vault pass
      copy:
        content: "{{ VAULT_PASS }}"
        dest: "{{ HOME }}/src/{{ item }}/vault_pass.txt"
        owner: tekberg
        group: tekberg
        mode: 0664
      loop:
        - dokku-stack
        - headsup
        - lmbackup
        - moinmoin-config
        - oltg-flask
        - personnel
        - portia
        - replicated_dbs
        - tracker
        - tracker-old

    - name: Create venvs for select repos.
      script: scripts/create_venv.sh "{{ item }}"
      loop:
         - portia
         - personnel
         - moinmoin-config
         - replicated_dbs
         - dokku-stack
         - tracker
         - ariel
         - oltg-flask
         - elmira
         - headsup
      become: true
      become_user: tekberg

    - name: portia user setup - .pgpass
      template:
        src: templates/pgpass
        dest: "{{ HOME }}/.pgpass"
        owner: tekberg
        group: tekberg
        mode: 0600

    # Do all of the MAILTOs here
    - name: MAILTO crontab setup
      cronvar:
        user="tekberg"
        name="MAILTO"
        value="lmscribe@u.washington.edu"
      tags:
        - cron

    - name: set up ssh for oltg-aws-test
      blockinfile:
        create: yes
        dest: "{{ HOME }}/.ssh/config"
        marker: "# {mark} test added tomsserver repo in deploy/install.yml"
        insertbefore: BOF
        content: |
          Host oltg-aws-test
            HostName 54.186.96.31
            User ubuntu
            IdentityFile ~/.ssh/oltg.pem
            StrictHostKeyChecking no
            ProxyCommand ssh ihop exec nc %h %p 2> /dev/null

    - name: set up ssh for oltg-aws-prod
      blockinfile:
        create: yes
        dest: "{{ HOME }}/.ssh/config"
        marker: "# {mark} prod added tomsserver repo in deploy/install.yml"
        insertbefore: BOF
        content: |
          Host oltg-aws-prod
            HostName 54.188.79.235
            User ubuntu
            IdentityFile ~/.ssh/oltg.pem
            StrictHostKeyChecking no
            ProxyCommand ssh ihop exec nc %h %p 2> /dev/null

    - name: oltg.pem to .ssh
      copy:
        content: "{{ PRIVATE_AWS_OLTG_KEY }}"
        dest: "{{ HOME }}/.ssh/oltg.pem"
        owner: tekberg
        group: tekberg
        mode: 0600

    - name: cron to copy JSON files
      cron:
        user: tekberg
        name: "copy JSON files"
        job: "scp -q monitor.labmed.uw.edu:/home/filetransfer/plm-json/*.json src/headsup/json 2>&1"
        minute: "0-59/5"

    # Only run when this cron on toms server stops running
    - name: cron to install portia reports
      cron:
        user: tekberg
        name: "install portia reports"
        job: "src/portia/scripts/install-reports.sh"
        minute: "15"
      tags:
        - never

    # Only run when this cron on toms server stops running
    - name: cron to update user access for portia reports
      cron:
        user: tekberg
        name: "update user access for portia reports"
        job: "src/portia/scripts/update-user-access.sh"
        minute: "3"
      tags:
        - never


    - name: cron to check time delta
      cron:
        user: tekberg
        name: "check time delta"
        job: "bin/host_time_delta.sh"
        minute: "10"
        hour: "1"

    - name: create SANDBOX directory
      file:
        path: "{{ HOME }}/SANDBOX"
        state: directory
      become: true
      become_user: tekberg

    - name: preserve SANDBOX files
      command: "rsync -a tekberg@10.144.70.199:SANDBOX/ {{ HOME }}/SANDBOX/"
      become: true
      become_user: tekberg
# This didn't work
#    - name: preserve SANDBOX files
#      synchronize:
#        archive: yes
#        src: "tekberg@10.144.70.199:{{ HOME }}/SANDBOX/"
#        dest: "{{ HOME }}/SANDBOX/"
#      become: true
#      become_user: tekberg


    - name: create labreport directory lis_archive
      file:
        path: "{{ HOME }}/lis_archive"
        state: directory
      become: true
      become_user: tekberg

    - name: create labreport directory lis_data
      file:
        path: "{{ HOME }}/lis_data"
        state: directory
      become: true
      become_user: tekberg

    - name: create labreport directory lis_pdf
      file:
        path: "{{ HOME }}/lis_pdf"
        state: directory
      become: true
      become_user: tekberg
